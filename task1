Set the username:

git config –global user.name
Set the user email:

git config –global user.email
Create a Git command shortcut:

git config –global alias.
Set the preferred text editor:

git config –system core.editor
Open and edit the global configuration file in the text editor:

git config –global –edit
Enable command line highlighting:

git config –global color.ui auto

Create an empty repository in the project folder:

git init
Clone a repository from GitHub and add it to the project folder:

git clone (repo URL)
Clone a repository to a specific folder:

git clone (repo URL) (folder)
Display a list of remote repositories with URLs:

git remote -v
Remove a remote repository:

git remote rm (remote repo name)
Retrieve the most recent changes from origin but don’t merge:

git fetch
Retrieve the most recent changes from origin and merge:

git pull

Add file changes to staging:

git add (file name)
Add all directory changes to staging:

git add .
Add new and modified files to staging:

git add -A
Remove a file and stop tracking it:

git rm (file_name)
Untrack the current file:

git rm –cached (file_name)
Recover a deleted file and prepare it for commit:

git checkout <deleted file name>
Display the status of modified files:

git status
Display a list of ignored files:

git ls-files –other –ignored –exclude-standard
Display all unstaged changes in the index and the current directory:

git diff
Display differences between files in staging and the most recent 
versions:

git diff –staged
Display changes in a file compared to the most recent commit:

git diff (file_name)
Commands for Declaring Git Commits#
Commit changes along with a custom message:

git commit -m "(message)"
Commit and add all changes to staging:

git commit -am "(message)"
Switch to a commit in the current branch:

git checkout <commit>
Show metadata and content changes of a commit:

git show <commit>
Discard all changes to a commit:

git reset –hard <commit>
Discard all local changes in the directory:

git reset –hard Head
Show the history of changes:

git log
Stash all modified files:

git stash
Retrieve stashed files:

git stash pop
Empty stash:

git stash drop
Define a tag:

git tag (tag_name)
Push changes to origin:

git push

Display a list of all branches:

git branch
Make a new branch and switch to it:

git checkout -b <branchname>
Switch to a branch:

git checkout <branchname>
Delete a branch:

git branch -d <branchname>
Merge a different branch with your active branch:

git merge <branchname>
Fetch a branch from the repository:

git fetch remote <branchname>
View merge conflicts between branches:

git diff <sourcebranch> <targetbranch>
Preview changes before merging branches:

git diff <sourcebranch> <targetbranch>
Push all local branches to a designated remote repository:

git push –all


